generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
}

enum PaymentStatus {
  Paid
  Pending
  Cancelled
}

enum ProductType {
  Bigo
  Smile
}

enum CouponStatus {
  Active
  Used
  Expired
  Disabled
}

model Website {
  id               Int       @id @default(autoincrement())
  isTechWorks      Boolean
  techWorksEndsAt  DateTime? // точка, когда “тех. работы” автоматически выключатся
}
model Bank {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
}
model User {
  id                Int           @id @default(autoincrement())
  identifier        String?       @unique
  password          String?
  first_name        String?
  last_name         String?
  gender            String?
  birth_date        String?
  email             String?       @unique
  phone             String?       @unique
  avatar            String?
  role              Role          @default(User)
  is_banned         Boolean       @default(false)
  is_verified       Boolean       @default(false)
  verification_code String?
  change_password_code String?

  orders            Order[]
  feedbacks         Feedback[]
  payments          Payment[]
  usedCoupons       UsedCoupon[]
  activeCoupons     ActiveCoupon[] // ✅ multiple active coupons
}

model Banner {
  id           Int           @id @default(autoincrement())
  image        String
  mobileImage  String
  buttonLink   String
  title        String
}

model Coupon {
  id           Int           @id @default(autoincrement())
  code         String        @unique
  limit        Int?
  discount     Int
  status       CouponStatus  @default(Active)

  usedBy       UsedCoupon[]
  activeUsers  ActiveCoupon[] // ✅ multiple users can activate
  orders       Order[]
  products     Product[]     @relation("CouponProducts")
}

model Product {
  id              Int        @id @default(autoincrement())
  name            String
  description     String   
  description_en  String     @default("")
  image           String
  replenishment   Json
  currency_image  String?
  currency_name   String?
  smile_api_game  String?    @unique
  type            ProductType
  order_number    Int        @default(1)

  feedbacks       Feedback[]
  orders          Order[]
  coupons         Coupon[]   @relation("CouponProducts")
}

model UsedCoupon {
  id         Int       @id @default(autoincrement())
  user_id    Int
  coupon_id  Int
  used_at    DateTime  @default(now())

  user       User      @relation(fields: [user_id], references: [id])
  coupon     Coupon    @relation(fields: [coupon_id], references: [id])

  @@unique([user_id, coupon_id]) // prevent duplicate usage
}

model ActiveCoupon {
  id          Int       @id @default(autoincrement())
  user_id     Int
  coupon_id   Int
  activated_at DateTime @default(now())

  user        User      @relation(fields: [user_id], references: [id])
  coupon      Coupon    @relation(fields: [coupon_id], references: [id])

  @@unique([user_id, coupon_id]) // prevent duplicate activation
}

model Payment {
  id         Int            @id @default(autoincrement())
  price      Decimal
  method     String
  order_id   Int
  user_id    Int?
  status     PaymentStatus
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt @default(now())

  order      Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  user       User?           @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Feedback {
  id          Int      @id @default(autoincrement())
  reaction    Boolean
  text        String
  product_id  Int
  isVerified  Boolean  @default(false)
  user_id     Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())

  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Order {
  id           Int         @id @default(autoincrement())
  user_id      Int?
  product_id   Int
  item_id      Int
  payment      String
  identifier   String
  status       PaymentStatus  @default(Pending)
  account_id   String?
  server_id    String?
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt @default(now())
  response     Json?

  coupon_id    Int?
  coupon       Coupon?        @relation(fields: [coupon_id], references: [id])

  user         User?           @relation(fields: [user_id], references: [id])
  product      Product        @relation(fields: [product_id], references: [id], onDelete: Cascade)
  payments     Payment[]
}
