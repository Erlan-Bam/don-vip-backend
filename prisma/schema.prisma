// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
}

enum PaymentStatus {
  Paid
  Pending
  Cancelled
}

enum ProductType {
  Bigo
  Smile
}

model User {
  id            Int       @id @default(autoincrement())
  identifier    String    @unique
  password      String
  first_name    String?
  last_name     String?
  gender        String?
  birth_date    DateTime?
  phone         String?   @unique
  avatar        String?
  role          Role      @default(User)
  is_banned     Boolean   @default(false) // ✅ Новое поле

  orders        Order[]
  feedbacks     Feedback[]
  payments      Payment[]
}

model Payment {
  id            Int            @id @default(autoincrement())
  price         Decimal
  method        String
  order_id      String
  user_id       Int
  status        PaymentStatus  
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt @default(now())

  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}enum CouponStatus {
  Active
  Used
  Expired
  Disabled
}


model Product {
  id             Int      @id @default(autoincrement())
  name           String
  description    String
  image          String
  replenishment  Json
  smile_api_game String?  @unique
  type           ProductType
  feedbacks      Feedback[]
  orders         Order[]
}

model Feedback {
  id            Int        @id @default(autoincrement())
  reaction      Boolean
  text          String
  product_id    Int
  user_id       Int

  product       Product     @relation(fields: [product_id], references: [id])
  user          User        @relation(fields: [user_id], references: [id])
}

model Coupon {
  id        Int           @id @default(autoincrement())
  code      String        @unique
  limit     Int?
  discount  Int
  status    CouponStatus  @default(Active) // ✅ добавлено поле статуса
}


model Order {
  id            String         @id @default(uuid())
  user_id       Int
  product_id    Int
  item_id       Int
  payment       String
  status        PaymentStatus  @default(Pending)
  account_id    String?
  server_id     String?
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt @default(now())

  user       User     @relation(fields: [user_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  payments   Payment[]
}
